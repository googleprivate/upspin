{
  "comments": [
    {
      "key": {
        "uuid": "df6e5eac_f5ded1c5",
        "filename": "store/storecache/atime_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 5309
      },
      "writtenOn": "2017-10-19T15:44:03Z",
      "side": 1,
      "message": "Not sure this works with non ntfs systems but hopefully won\u0027t core dump.  Probably not a real worry.",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daec9c8c_de41865a",
        "filename": "store/storecache/atime_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 6197
      },
      "writtenOn": "2017-10-19T17:29:05Z",
      "side": 1,
      "message": "Yes, you did mention that from the start and it stayed at the back of my mind while writing the code. I guess we could potentially live with it until (if ever) someone complains. If that does happens though, we\u0027ll have no choice but to return to your log implementation which is already in now.",
      "parentUuid": "df6e5eac_f5ded1c5",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "137156d9_0a19b645",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 5309
      },
      "writtenOn": "2017-10-19T15:44:03Z",
      "side": 1,
      "message": "Check my current implementation. You want to merge into that. You can get rid of the log with this but you probably want to retain the fact that I just save relative path names in the map. It has a very positive effect in process size by saving a long prefix like \"/Users/presotto/upspincaches/storecache\" for every entry.",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cef06c2_2d6b4270",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 6197
      },
      "writtenOn": "2017-10-19T17:29:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "137156d9_0a19b645",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65737855_87aedb22",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 76,
      "author": {
        "id": 5309
      },
      "writtenOn": "2017-10-19T16:00:04Z",
      "side": 1,
      "message": "Perhaps it would be cheaper in space to just put the atime in the cacheref and sort them directly. The storecache process size will take a bit initial jump because of the slice of names being sorted. Even though it gets freed, it does largely increase the footprint needed for the process.  Given that I changed maxRef recently to much larger this could be painful.",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb67b8ce_9c741442",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 76,
      "author": {
        "id": 6197
      },
      "writtenOn": "2017-10-19T17:29:05Z",
      "side": 1,
      "message": "Adding atime to cachedRef would be a performance improvement for the sort indeed. My only concern here is that having the extra field might mislead future developers into thinking that it is representative of the current access time, which would be false because the access time can change out of our control (by means of external tools such as find, as you have mentioned yourself). Worst case scenario we could manage updating it on every R/W but that seems too tedious and not worthwhile. Or even if we mention in the documentation that it\u0027s only used for initialisation, then why have it on the struct at all?\n\nI liked the other suggestion with the minimal struct more. Sorry if I\u0027m missing something.",
      "parentUuid": "65737855_87aedb22",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56f82f2b_82ebb42d",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 5309
      },
      "writtenOn": "2017-10-19T15:44:03Z",
      "side": 1,
      "message": "The cache is a multilevel directory so that the paths are:\n\nstorecache/\u003cendpoint\u003e/xx/\u003cref\u003e\n\nSince Name() is just the basename, \u003cref\u003e, you are creating a pathname that is just \n\nstorecache/\u003cref\u003e\n\nFYI, the structure is such because:\n\n\u003cendpoint\u003e - I had to separate by system because I want to be able to selectively wipe. Also we\u0027ve had some special purpose stores that didn\u0027t use sha hashes as block names resulting in collisions.\nxx - just a way to reduce directory size.  On some systems giant directories get n squared behavior.",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09be5e9d_cc2c97b3",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 6197
      },
      "writtenOn": "2017-10-19T17:29:05Z",
      "side": 1,
      "message": "Thank you for the insight, the new naming definitely sounds like a better and more scalable plan on the long term.",
      "parentUuid": "56f82f2b_82ebb42d",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0efe1521_074fea6f",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 5309
      },
      "writtenOn": "2017-10-19T15:44:03Z",
      "side": 1,
      "message": "FileInfo can be large. No reason to blow up storage with it. Also, to fix the problem above you probably just want a struct with pathname and atime.",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f40b2fb2_229ff169",
        "filename": "store/storecache/cache.go",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 6197
      },
      "writtenOn": "2017-10-19T17:29:05Z",
      "side": 1,
      "message": "You\u0027re perfectly right, a small struct would probably make everything a lot more efficient. No reason to return anything extra from walk either, it can all just happen in here as it currently does (creating the cachedRefs that is).",
      "parentUuid": "0efe1521_074fea6f",
      "revId": "99f525d671827f5916be8f68e9f1efc27990688a",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    }
  ]
}