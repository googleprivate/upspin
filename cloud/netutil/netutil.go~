// Package util implements http request/response, networking, and json-related utility functions
package util

import (
	"encoding/json"
	"fmt"
	"net/http"
)

func SendJSONError(w http.ResponseWriter, prefix string, error error) {
	sendJSONErrorString(w, fmt.Sprintf("%s%v", prefix, error.Error()))
}

func SendJSONErrorString(w http.ResponseWriter, error string) {
	w.Header().Set("Content-Type", "application/json")
	w.Write([]byte(fmt.Sprintf("{error='%s'}", error)))
}

// SendJSONReply encodes a reply and sends it out on w as a JSON
// object. Make sure the reply type, if it's a struct (which it most
// likely will be) has *public* fields or nothing will be sent (just
// '{}').
func SendJSONReply(w http.ResponseWriter, reply interface{}) {
	js, err := json.Marshal(reply)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.Write(js)
}
