{
  "comments": [
    {
      "key": {
        "uuid": "f9cbd80d_de1fea00",
        "filename": "factotum/factotum.go",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 5140
      },
      "writtenOn": "2017-01-27T18:24:33Z",
      "side": 1,
      "message": "Is it our curve (curve of private key) or peer\u0027s curve? We have to check against *private key*\u0027s curve; otherwise an attacker can still generate a public key on its curve; but not on our curve.\nIt\u0027s tricky to fix ECDH correctly.",
      "range": {
        "startLine": 194,
        "startChar": 6,
        "endLine": 194,
        "endChar": 11
      },
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2c57d52_88c57c34",
        "filename": "factotum/factotum.go",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 5025
      },
      "writtenOn": "2017-01-27T18:42:02Z",
      "side": 1,
      "message": "f.ScalarMult is called from one place, pack/ee/ee.go:707, where we (intend to) set curve to be our private key\u0027s curve.  I\u0027ll go double check the logic and think about whether to add an additional test, just so the code is not brittle against future change.",
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe7e1b03_2024b1fa",
        "filename": "factotum/factotum.go",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 5140
      },
      "writtenOn": "2017-01-27T18:50:50Z",
      "side": 1,
      "message": "SGTM",
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1036dc97_e48acd47",
        "filename": "factotum/factotum.go",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 5025
      },
      "writtenOn": "2017-01-27T18:52:50Z",
      "side": 1,
      "message": "Yes, looks solid to me.   The curve definitely matches the private key and not likely to be screwed up by any future code change.\n\nI did pause for a bit to think about whether the adversary could exploit our past key rotations to somehow trick us into using one private key and a different one of our old curves, but don\u0027t see any way to do even that.",
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41a838c9_3a7a4088",
        "filename": "pack/ee/ee.go",
        "patchSetId": 2
      },
      "lineNbr": 654,
      "author": {
        "id": 5140
      },
      "writtenOn": "2017-01-27T18:24:33Z",
      "side": 1,
      "message": "Is it our curve (curve of private key) or peer\u0027s curve? We have to check against *private key*\u0027s curve; otherwise an attacker can still generate a public key on its curve; but not on our curve.\nIt\u0027s tricky to fix ECDH correctly.",
      "range": {
        "startLine": 654,
        "startChar": 5,
        "endLine": 654,
        "endChar": 10
      },
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "478d8379_fdde48f8",
        "filename": "pack/ee/ee.go",
        "patchSetId": 2
      },
      "lineNbr": 654,
      "author": {
        "id": 5025
      },
      "writtenOn": "2017-01-27T18:42:02Z",
      "side": 1,
      "message": "The curve is the peer\u0027s curve and could be anything.  At line 658, we generate an ephemeral private key that is definitely on the peer\u0027s curve.  If the peer\u0027s declared curve is malicious, then the key wrapping will be weak.\n\nBut we are getting the peer\u0027s curve from the central keyserver.  If the real peer wants to leak file contents, no need for them to play crypto games;  they can just leak directly.  If an attacker is maliciously modifying the central keyserver, we hope to detect this via key transparency.\n\nSo I think we\u0027re ok here.",
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "472de226_44b6294b",
        "filename": "pack/ee/ee.go",
        "patchSetId": 2
      },
      "lineNbr": 654,
      "author": {
        "id": 5140
      },
      "writtenOn": "2017-01-27T18:50:50Z",
      "side": 1,
      "message": "Your argument makes sense.\nOn the safe side: I would check the curve is on the list that we accepts (P-256, P-384, P-521) and rejects everything else. From my experience, we may miss some scenarios at the moment and only find out them later.",
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c17e6354_80e57b49",
        "filename": "pack/ee/ee.go",
        "patchSetId": 2
      },
      "lineNbr": 654,
      "author": {
        "id": 5025
      },
      "writtenOn": "2017-01-27T18:56:21Z",
      "side": 1,
      "message": "I\u0027ll think that through and fix in a future CL if there is a gap.  I want to allow 25519, for example, but supposedly we\u0027re already making sure that only a fixed approved set of curves are in use here.",
      "revId": "93b338ee0f23bb88e8f2de03ba20eeebe82a34c4",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}