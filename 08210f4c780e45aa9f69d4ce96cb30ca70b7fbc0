{
  "comments": [
    {
      "key": {
        "uuid": "a104284e_f7007866",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-10-25T00:42:28Z",
      "side": 1,
      "message": "this isn\u0027t right. the user is giving you this string. you\u0027re a server. your job is to canonicalize it, not to reject it if it is non-canonical.\nuser.Parse is all you need, but then you must install it using the name that comes back from there.\n\nyou made the same mistake in directory.Put but we fixed it there.",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a104284e_7ab0ed96",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-10-25T05:54:52Z",
      "side": 1,
      "message": "Well, if this is an error, I made this error once, here and in DirServer at the same time. As you can see, I\u0027m just renaming a parameter here. This line is not new, it has been here for a while.\n\nHowever, we do reject Dir.Put on poorly formatted DirEntry, which comes from the user too (or could come, if the user wants to talk directly to the dir server). This is true of dir/server and dir/inprocess.\n\nAnd key/inprocess.Put does the same thing.\n\nSo, what\u0027s really the correct answer here? \n\nI think the user needs to send a valid user. cmd/upspin user -put should canonicalize it if it\u0027s not right.",
      "parentUuid": "a104284e_f7007866",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a104284e_3a6ca5e9",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-10-25T14:01:32Z",
      "side": 1,
      "message": "I vaguely remember having this discussion regarding your implementation of MakeDirectory. It came up because you were rejecting MakeDirectory(\"r@google.com\") because it didn\u0027t have a trailing slash. But that function is gone now so I can\u0027t show you.\n\nThings are wrong in a bunch of places. Part of it might be just documentation.\n\nHere is the issue. It\u0027s in several parts.\n\nFirst, whenever we store an item in the database (let\u0027s call it that), it must be \"valid\" or we\u0027ll end up with an unreachable item or two names for something or some other horror. That\u0027s why we call valid.DirEntry in Put, and that is correct.\n\nSecond, the user is typing things at the system and doesn\u0027t always type (or construct through a system call) a correct name. For example, he might say r@google.com/foo/bar/../zot. That is not a valid name to store in the database. For the example of key.Put, he might be typing on the standard input his user name, which has an accent, but it comes in not in NFD or whatever it\u0027s called but some other normalization.\n\nSo we need to protect the database, but also accept unclean input and clean it up when appropriate. The client library should always present a clean DirEntry, so I think it\u0027s OK for dir to call valid. However, we\u0027ve never been explicit about who is responsible for the cleanup and that must be fixed. If the user types a User record, the canonicalization can and will be wrong. Who should fix it? Sometimes I think it\u0027s the key server, sometimes I think it\u0027s the caller (cmd/upspin).\n\nI suggest what we do is make it official that all inputs to the servers must be \"valid\", canonical, that it is the caller\u0027s responsibility to make it so, and that we both document this property and document how the caller can do that.\n\nAt the moment, I\u0027m not certain client is always correct. I\u0027m nearly certain cmd/upspin isn\u0027t when it doesn\u0027t go through client.",
      "parentUuid": "a104284e_7ab0ed96",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a104284e_9aeb11c5",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-10-25T16:07:57Z",
      "side": 1,
      "message": "My two cents:\n\n* Servers should almost always call valid since servers are an API and APIs are for programmers (and like compilers, they shouldn\u0027t be fixing programmer\u0027s input). \n* UIs are for users and cmd/upspin is an UI, so it can make fixes or prompt the user to make them.  \n* Client is a middle layer, it may do both things depending on the case.\n\nIn the MkDir case you mention, the trailing slash is perhaps a small fix that makes sense for the server to make, since there is really no other interpretation there.\n\nIf you look at valid.User, it checks for endpoints too. We can\u0027t fix endpoints.\n\nI agree on documenting this properly. Let\u0027s talk at the meeting.",
      "parentUuid": "a104284e_3a6ca5e9",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "811e44a4_286e2b73",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-10-25T00:01:23Z",
      "side": 1,
      "message": "shouldn\u0027t this be in valid.User ? and also user.Parse ?",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a104284e_14f7fab9",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-10-25T00:10:54Z",
      "side": 1,
      "message": "No. \"*\" is explicitly allowed in Parse and Valid. We are allowed to add it to any Access file, by design (though, I don\u0027t think it works perfectly everywhere as-is).",
      "parentUuid": "811e44a4_286e2b73",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a104284e_77eda89b",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-10-25T00:42:28Z",
      "side": 1,
      "message": "return errors.E(op, errors.Invalid, u.Name, errors.Str(\"user has wildcard \u0027*\u0027 in name\")",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01cc14aa_d7adbe85",
        "filename": "key/gcp/gcp.go",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-10-25T21:34:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a104284e_77eda89b",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a104284e_375840a3",
        "filename": "key/inprocess/user.go",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-10-25T00:42:28Z",
      "side": 1,
      "message": "same thing here.",
      "revId": "08210f4c780e45aa9f69d4ce96cb30ca70b7fbc0",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}