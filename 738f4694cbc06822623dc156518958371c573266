{
  "comments": [
    {
      "key": {
        "uuid": "e82ee08f_6ad8d2f4",
        "filename": "upspin/upspin.go",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-04-18T16:29:38Z",
      "side": 1,
      "message": "Should it return an error? Or perhaps the list of users added successfully? Or, maybe we could return another WrapNeeded instance with those users and dir entries that did not wrap successfully this time, sort of like a continuation.\n\nAlso, I still think we shouldn\u0027t call AddWrap and WrapNeeded, but instead something like Adjust and AdjustmentNeeded. Mostly because wrapping is not something all packers do and also it\u0027s not well-defined (as is) what a wrap is (this is the only point in upspin.go that talks about \"wrap\").",
      "revId": "738f4694cbc06822623dc156518958371c573266",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e82ee08f_ea4ba22d",
        "filename": "upspin/upspin.go",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5025
      },
      "writtenOn": "2016-04-18T16:53:52Z",
      "side": 1,
      "message": "I regard AddWrap as making incremental progress toward eventual consistency.  I don\u0027t yet see a compelling need for the additional returns, but we\u0027ll see how it goes as we write and use the callers.\n\nThe directory server, rather than the client, can directly fix inconsistencies that resolve by removing readers from Packdata.  I imagine in the non-key-wrapping Packers, the directory server can also resolve by directly adding readers.  So this AddWrap for now does seem specifically applicable to the ee* Packers.  If there is a good way to get it out of upspin.go altogether, even better, but I didn\u0027t see how to do it.\n\nAgain, once we see some additional case other than key-wrapping, hopefully we\u0027ll better understand the right abstraction so we pick a better name and interface.",
      "parentUuid": "e82ee08f_6ad8d2f4",
      "revId": "738f4694cbc06822623dc156518958371c573266",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e82ee08f_6a8b3214",
        "filename": "upspin/upspin.go",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-04-18T16:20:33Z",
      "side": 1,
      "message": "Our convention has been to put the error at the end, consistent with golint. Why reverse it?",
      "revId": "738f4694cbc06822623dc156518958371c573266",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e82ee08f_aa459a1b",
        "filename": "upspin/upspin.go",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 5025
      },
      "writtenOn": "2016-04-18T16:53:52Z",
      "side": 1,
      "message": "This return was what Dave called a \"By the way...\" value and seemed something the code reader would want to study even lower in priority than errors.   So I kept the whiteboard ordering.\n\nBut I don\u0027t feel strongly.  Reversing will also make golint quieter, so I\u0027ll go do so.",
      "parentUuid": "e82ee08f_6a8b3214",
      "revId": "738f4694cbc06822623dc156518958371c573266",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}