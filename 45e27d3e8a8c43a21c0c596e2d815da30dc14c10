{
  "comments": [
    {
      "key": {
        "uuid": "618870a5_0beba0f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-10-27T17:38:17Z",
      "side": 1,
      "message": "concurrent",
      "revId": "45e27d3e8a8c43a21c0c596e2d815da30dc14c10",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "618870a5_48076e7f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-10-27T04:26:49Z",
      "side": 1,
      "message": "But what are \"the problems\" (assuming there\u0027s a crash somewhere, not just fixing the race)?",
      "revId": "45e27d3e8a8c43a21c0c596e2d815da30dc14c10",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e16c60ba_937e1c5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-10-27T04:57:57Z",
      "side": 1,
      "message": "The problem is that a cipher.AEAD offers no guarantees of concurrency safety, yet all blockpackers/unpackers use the same instance. Using a crypto primitive in this way seems risky at best.",
      "parentUuid": "618870a5_48076e7f",
      "revId": "45e27d3e8a8c43a21c0c596e2d815da30dc14c10",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "266bee00_58cb6106",
        "filename": "pack/symm/symm.go",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 5025
      },
      "writtenOn": "2016-10-28T20:38:13Z",
      "side": 1,
      "message": "Would it be easier to understand if we use sync.Once?",
      "revId": "45e27d3e8a8c43a21c0c596e2d815da30dc14c10",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}