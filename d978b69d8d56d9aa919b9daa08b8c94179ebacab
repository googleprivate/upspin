{
  "comments": [
    {
      "key": {
        "uuid": "989149f5_495f56bf",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-24T04:00:43Z",
      "side": 0,
      "message": "Why remove this? We want to wait until all goroutines are ready.",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dda08a7_dde1d9f7",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T04:09:48Z",
      "side": 0,
      "message": "The way ready was used here is effectively meaningless. When a \"go fn()\" statement is evaluated a goroutine is created and the scheduler prepares to run it. Synchronizing with a goroutine to check that it\u0027s \"running\" just causes the scheduler toÂ run wake the goroutine and then put it back to sleep, just as it would have woken the goroutine to execute it in the first place.\n\nJust run \"go fn()\" and let it run!\n\nI also think the use of the start channel is similarly unnecessary, but I left it in so the change delta is smaller.",
      "parentUuid": "989149f5_495f56bf",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1694b6e0_10171c26",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-24T04:00:43Z",
      "side": 0,
      "message": "Why? No one will call done.Wait until all goroutines have called their Add(1).",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdfc9330_76b86d51",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T04:09:48Z",
      "side": 0,
      "message": "WaitGroup is subtle:\n\nhttps://golang.org/pkg/sync/#WaitGroup.Add\n\nI\u0027m sorry if the doc for Add is hard to follow (it was hard to write!).\nThe upshot is that if we call Wait before any of the calls to Add have completed, then all bets are off.\nWe call done.Wait() after closing start, but closing start doesn\u0027t guarantee that any of the goroutines have called done.Add, so that\u0027s a misuse of the WaitGroup API.",
      "parentUuid": "1694b6e0_10171c26",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7de0068f_2bddb5f2",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T04:20:00Z",
      "side": 0,
      "message": "Actually it wasn\u0027t the calls to done.Add and done.Wait that were out of order (although they weren\u0027t after I removed ready, which is why I got confused). It was the original calls to ready.Add and ready.Done. Since the writer goroutines were started before the second call to Add, it\u0027s possible that the waitgroup internal counter reached zero before the second call to Add, leaving all the readers blocked.\n\nIt\u0027s all a bit weird and hard to follow, but simplifying it makes the code not deadlock anymore, so that seems like a win?",
      "parentUuid": "bdfc9330_76b86d51",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a566997b_bbccff55",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-24T04:20:26Z",
      "side": 0,
      "message": "That\u0027s why there was a ready channel, so that we can\u0027t possibly miss some of the add by reaching wait before it\u0027s added.\n\nI don\u0027t think this test was wrong at all. It\u0027s red herring.",
      "parentUuid": "bdfc9330_76b86d51",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db374dc3_11166b63",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-24T04:25:39Z",
      "side": 0,
      "message": "Replying to your second reply: okay, so can you put back the unnecessary done and ready, if they weren\u0027t the culprit? I\u0027m more convinced now that ready.Add(numWriters+numReaders) is the problem. I think that\u0027s what you\u0027re saying right?",
      "parentUuid": "a566997b_bbccff55",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "721a7e8c_df5247e3",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T04:26:44Z",
      "side": 0,
      "message": "You described seeing lock-ups when running TestConcurrent with bufio.Reader, right?\nI was able to reproduce those errors, and tracked it down to a stack trace with only a few goroutines. Those goroutines were running the testing package infrastructure and TestConcurrent. No dir/server/tree code was running at all. The line that TestConcurrent was blocked at was done.Wait().\n\nWith this small simplification to the test the lock-ups go away.\n\nIf the lock-ups happen while only the test is running, then surely it has something to do with the test?",
      "parentUuid": "a566997b_bbccff55",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9ec6bed_3ff830d0",
        "filename": "dir/server/tree/log_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T04:28:45Z",
      "side": 0,
      "message": "I\u0027m basing this CL on your other CL, so you might as well try it and see if the change works for you there. Just trying to help.",
      "parentUuid": "721a7e8c_df5247e3",
      "revId": "d978b69d8d56d9aa919b9daa08b8c94179ebacab",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    }
  ]
}