{
  "comments": [
    {
      "key": {
        "uuid": "0a0b3baa_4776aee8",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 316,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "rather than having this flag, why don\u0027t we just always read from standard input?\nit\u0027s shorter to write\n\nupspin -put adg@google.com \u003c data.json\nthan\nupspin -put -file data.json adg@google.com",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_67fc1211",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 316,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "The flag existed before. It\u0027s standard practice.",
      "parentUuid": "0a0b3baa_4776aee8",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_6a4e1795",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 316,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T16:40:01Z",
      "side": 1,
      "message": "OK, I see it in cmd/upspin. Seems good.",
      "parentUuid": "0a0b3baa_67fc1211",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_2783baaa",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "s/infile/in/\nshould also check -force",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_07f3163f",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a0b3baa_2783baaa",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_0780b699",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 338,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "var names []upspin.UserName\n\nwe *really* overuse make() in this codebase.\nthese preallocations are almost always premature optimizations",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_c713be5e",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 338,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "If I know the size ahead of time, it\u0027s better to pre-allocate. Leaving as is.",
      "parentUuid": "0a0b3baa_0780b699",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_2a481f84",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 338,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T16:40:01Z",
      "side": 1,
      "message": "Better by what metric?\nIt makes the code harder to scan andÂ is totally irrelevant, performance-wise.",
      "parentUuid": "0a0b3baa_c713be5e",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_8a826b5e",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 338,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T17:21:54Z",
      "side": 1,
      "message": "Number of allocations and space used (append may pre-allocate more than necessary). \n\nAnd it\u0027s just as easy to read (isn\u0027t this just as subjective as the performance gain/loss?).",
      "parentUuid": "0a0b3baa_2a481f84",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_e7ab6222",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 340,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "names \u003d []upspin.UserName{ctx.UserName()}",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_a718ca7b",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 340,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "see above.",
      "parentUuid": "0a0b3baa_e7ab6222",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_c7b05e91",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 353,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "what is this format? I haven\u0027t seen it before",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_6723f2af",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 353,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "Discussed with Rob. Easier to parse, less verbose than JSON.",
      "parentUuid": "0a0b3baa_c7b05e91",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_879386fd",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 502,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "I think \u0027readAll\u0027 is a reasonable name for this. \u0027FromInput\u0027 doesn\u0027t add anything (the argument is sufficient documentation). The argument should probably be \u0027filename\u0027.",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_4720eea0",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 502,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a0b3baa_879386fd",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_6779b2d8",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 505,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "delete",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_674ad261",
        "filename": "cmd/upspin/main.go",
        "patchSetId": 5
      },
      "lineNbr": 505,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a0b3baa_6779b2d8",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_a7a56a4d",
        "filename": "cmd/upspin/userparser.go",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T13:57:22Z",
      "side": 1,
      "message": "Why are we inventing a whole new file format when we could just use JSON?",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_876b86c0",
        "filename": "cmd/upspin/userparser.go",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T15:28:13Z",
      "side": 1,
      "message": "It\u0027s less verbose than JSON. Also, Rob mentioned that if we just used JSON, then this wouldn\u0027t be any better than gsutil cp.",
      "parentUuid": "0a0b3baa_a7a56a4d",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_4af9131f",
        "filename": "cmd/upspin/userparser.go",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-21T16:40:01Z",
      "side": 1,
      "message": "My objections:\n\nIt is not easier to parse, because you had to write a parser when you could have used json.Unmarshal.\n\nIt is not easier to emit, because you had to write an ad-hoc emitter for it.\n\nIt is not specified or documented anywhere.\n\nOther programs cannot easily read and write this format.\n\nIt *is* much better than \u0027gsutil cp\u0027 because it does validation, authentication, and access control.\n\nIf the worry is not having a template to work from, we could have a \u0027upspin user -template\u0027 that spits out an indented (see json.MarshalIndent) JSON user record with all the fields blank.\n\nI am strongly against adding 200 lines of code for an ad hoc configuration format. I am willing to be convinced otherwise, but I currently don\u0027t see a sound rationale for adding this complexity.",
      "parentUuid": "0a0b3baa_876b86c0",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b3baa_aad9af80",
        "filename": "cmd/upspin/userparser.go",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-21T17:21:54Z",
      "side": 1,
      "message": "I agree. That was my line of though as well. \n\nI\u0027ll let you take it up with Rob because I don\u0027t want to go back and forth on this if he disagrees. Hopefully there will be consensus before I leave this afternoon.\n\nThe good news is that converting this to use JSON is easy. The unittest will be a bit more work to fix but I likely won\u0027t even need one.\n\nThe bad news is that this kind of comment later in the process is very disruptive for the team and for me in particular because it\u0027s now happened to me 3 times in a row that I throw large chunks of code out. \n\nThrowing it out is easy. I\u0027m not attached to code. The less, the better. But I can\u0027t help but notice there\u0027s lot of wasted effort in throwing code away week after week. \n\nI\u0027ve mentioned before that better communication is the way to fix this. \n\nAnd we tried. Rob and I had an initial conversation however informal it was and we agreed on this (at least I thought so). But not every single decision needs everyone in the room. If you want to be the guardian of all CLs, you will need to be in the room all the time, even when it\u0027s something as simple as this. And that\u0027s not practical.\n\nWhat do you suggest we do to speed things along while keeping a decent high bar on code quality?",
      "parentUuid": "0a0b3baa_4af9131f",
      "revId": "6dacdb800ccdb5e5dc514e642774d865330722a9",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}