{
  "comments": [
    {
      "key": {
        "uuid": "8571eb59_29512d2d",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T00:59:20Z",
      "side": 1,
      "message": "really this is just a file, not necessarily an access file, and since the type is only used in the unarchive function, you can do this inside the func:\n\ntype file struct {\n  name upspin.PathName\n  content []byte\n}\nvar accessFiles []file",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d37396_7b634739",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-09-28T05:34:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8571eb59_29512d2d",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8571eb59_69572524",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T00:59:20Z",
      "side": 1,
      "message": "put this up near the flags",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d37396_fb45779c",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-09-28T05:34:53Z",
      "side": 1,
      "message": "see below.",
      "parentUuid": "8571eb59_69572524",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8571eb59_893ff9e2",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T00:59:20Z",
      "side": 1,
      "message": "fmt.Fprint(os.Stderr, `Usage:\n...\n`)",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d37396_db4a33ac",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-09-28T05:34:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8571eb59_893ff9e2",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8571eb59_0954691c",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T00:59:20Z",
      "side": 1,
      "message": "put this after or before \u0027type archiver\u0027",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d37396_7b3a2721",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-09-28T05:34:53Z",
      "side": 1,
      "message": "moved up, after full definition of archiver.",
      "parentUuid": "8571eb59_0954691c",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62ef8d70_6069121c",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T20:39:09Z",
      "side": 1,
      "message": "I really must insist that you put the constructor alongside the type declaration. This is a standard go practice that has a number of benefits. One obvious one, in this case, is that the struct fields and the function that initializes them are co-located, so that if the fields change you can easily see that they are being properly initialized.",
      "parentUuid": "45d37396_7b3a2721",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d37396_73324b5f",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-09-28T21:31:45Z",
      "side": 1,
      "message": "Push back. End of story?",
      "parentUuid": "62ef8d70_6069121c",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8571eb59_a9443d6f",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T00:59:20Z",
      "side": 1,
      "message": "drop the variable, put it in the struct",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d37396_5b376335",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-09-28T05:34:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8571eb59_a9443d6f",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8571eb59_495a614f",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T00:59:20Z",
      "side": 1,
      "message": "this isn\u0027t c, so we can put the main function at the top, next to where the flags are defined etc. then you can more easily read the program top to bottom",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d37396_bbbadf8b",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-09-28T05:34:53Z",
      "side": 1,
      "message": "It\u0027s not about being C, it\u0027s about flow of reading code. Main only puts stuff together, but if I don\u0027t know what that stuff is, it\u0027s just not clear what it\u0027s doing yet. \n\nI suggest we do: const, var, types, implementation of type\u0027s methods, non-member helper functions, and then main and init last.\n\nOr we agree to live with slightly different styles. It\u0027s better than arguing forever (and beats moving code around at review time).",
      "parentUuid": "8571eb59_495a614f",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62ef8d70_002a46e6",
        "filename": "cmd/archive/main.go",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-09-28T10:14:18Z",
      "side": 1,
      "message": "\"I suggest we do it my way, or we agree to disagree.\"\nYou drive a hard bargain!\n\nWhen I read a program, I start with main and follow the flow of code. Compilers do it the other way around, because they have a perfect memory. I don\u0027t.\n\nI don\u0027t care to argue about it any further, but I strongly suggest you do it the other way (the structure of cmd/upspin is nice, IMO). We are planning to open source this code, and it\u0027s important to me that the code is accessible to other programmers.",
      "parentUuid": "45d37396_bbbadf8b",
      "revId": "b1dbd9a49b00852768c622fb040b5b6f6cc65978",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}