{
  "comments": [
    {
      "key": {
        "uuid": "b4957e72_19ae434f",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-27T02:26:41Z",
      "side": 1,
      "message": "I don\u0027t understand why this type is now a buffer as well.\nIf bufio.Reader wasn\u0027t working for you, why not replace it with your own simpler implementation, rather than making checker do two things?\nIt\u0027s weird that the two features, checksumming and buffering, are put together here, since they have nothing to do with each other.\n\nIf you want to avoid allocations, the bufio.Reader type has a Reset method that can be used to re-use the bufio.Reader on a new io.Reader.\nThe net/http package, for instance, uses sync.Pool to recycle *bufio.Readers between connections, exactly as you want to do here.\n\nIt seems wrong that we should be implementing our own buffered reader when there is a widely-used and well-tested version in the standard library.",
      "revId": "61d328fd89d42df58fd7446ca0c3a4f2908f4855",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cae633af_42ca9de8",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-27T03:18:59Z",
      "side": 1,
      "message": "The double job here is intentional and planned -- it\u0027s for the sake of performance and avoiding doing work we don\u0027t need. bufio does more than we need and it makes internal data movements. It also lets us undo reads by keeping track of the last byte, etc, which we also don\u0027t need.",
      "parentUuid": "b4957e72_19ae434f",
      "revId": "61d328fd89d42df58fd7446ca0c3a4f2908f4855",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d30f5c78_dd2b8bf8",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-27T03:27:23Z",
      "side": 1,
      "message": "If it were two types, where would the extra work or copying be done?\n\nWhere are the benchmarks showing that this improves performance?",
      "parentUuid": "cae633af_42ca9de8",
      "revId": "61d328fd89d42df58fd7446ca0c3a4f2908f4855",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f317187_e23ea83e",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 5660
      },
      "writtenOn": "2017-03-27T05:11:33Z",
      "side": 1,
      "message": "I am also not a fan of the responsibilities of checker. The main responsibility of checker should be checking. But from external view (when it interacts with other components), we treat it as reader. I feel it is confusing when I read the code yesterday.\n\nIt seems to me that we can have our own entry reader that embeds a checker. Check might access the buffer in the entry reader for efficiency reason. From external point of view, entry reader always return a checked entry.",
      "parentUuid": "d30f5c78_dd2b8bf8",
      "revId": "61d328fd89d42df58fd7446ca0c3a4f2908f4855",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14731d91_1277ea12",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 3
      },
      "lineNbr": 674,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-27T02:26:41Z",
      "side": 1,
      "message": "why do you care whether the buffer was from the pool when putting it back?",
      "revId": "61d328fd89d42df58fd7446ca0c3a4f2908f4855",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15acfc9e_3011fa3e",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 3
      },
      "lineNbr": 674,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-27T03:18:59Z",
      "side": 1,
      "message": "Originally it was to avoid problems with buffers of different sizes. Originally, supporting different sizes was a feature, then it became just for testing. \n\nCurrently it\u0027s because there was nothing in the sync.Pool documentation that led me to believe I could Put an object I did not Get from it. I assumed Put was to say \"I\u0027m done, return it to the pool\". I see now it also does not say I can\u0027t Put stuff in there that didn\u0027t come from Pool.New.\n\nGood, so if I can Put stuff I did not Get, then I can test here whether the buffer size is the default size.",
      "parentUuid": "14731d91_1277ea12",
      "revId": "61d328fd89d42df58fd7446ca0c3a4f2908f4855",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    }
  ]
}