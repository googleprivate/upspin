{
  "comments": [
    {
      "key": {
        "uuid": "4f0f05e3_79ca2746",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T22:15:22Z",
      "side": 1,
      "message": "it\u0027s actually unknown transport\nrather than having an error return, i\u0027d rather just add this case:\n\ndefault:\n  s :\u003d \"unknown\"\n  if ep.NetAddr !\u003d \"\" {\n    s +\u003d \",\"+ep.NetAddr\n  return s\n\nand then once you\u0027re not using an error return, this can become the String method again.",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_9519a4e2",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:03:22Z",
      "side": 1,
      "message": "If you do this, you invalidate what I\u0027m trying to accomplish here which is not to let the JSON encoding/decoding proceed if the transport is unknown.",
      "parentUuid": "4f0f05e3_79ca2746",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf24d597_a582def8",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T23:12:41Z",
      "side": 1,
      "message": "I\u0027m not convinced that an unknown transport should halt json encoding.\nWhat\u0027s the rationale there?\nI can see arguments both ways, but I\u0027m curious to know what yours is.",
      "parentUuid": "cf769583_9519a4e2",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_75f40826",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:28:19Z",
      "side": 1,
      "message": "If you do cmd/upspin user -put \u003c foo.txt and foo.txt contains a bad endpoint, I want to see it fail. \n\nThis marshaling is only needed when dealing with user strings. Our code should never make this mistake (but if it does, why shouldn\u0027t it fail).\n\nThis is the whole point of this CL.",
      "parentUuid": "cf24d597_a582def8",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f0f05e3_19bdebaa",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T22:15:22Z",
      "side": 1,
      "message": "You don\u0027t want to remove this. It\u0027s useful in error messages and debugging, at least.",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_d5eebcb7",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f0f05e3_19bdebaa",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f0f05e3_99f9fb85",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T22:15:22Z",
      "side": 1,
      "message": "this becomes json.Marshal(ep.String())",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_152e74f6",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:03:22Z",
      "side": 1,
      "message": "No, we want the error. See above.",
      "parentUuid": "4f0f05e3_99f9fb85",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f0f05e3_b9f4bf8d",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T22:15:22Z",
      "side": 1,
      "message": "s/str/s/ ?",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_5538ec39",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:03:22Z",
      "side": 1,
      "message": "I use str consistently. (mostly :-))",
      "parentUuid": "4f0f05e3_b9f4bf8d",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf24d597_c587da07",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T23:12:41Z",
      "side": 1,
      "message": "Go style is for the variable to be \u0027s\u0027. it is used twice in the function, and its purpose is unambiguous. \"var str string\" stutters. All go programmers know that the local variable \u0027s\u0027 is a string.\n\nI suggest we adopt the canonical go style:\n\nhttps://github.com/golang/go/wiki/CodeReviewComments#variable-names\nhttps://talks.golang.org/2014/names.slide#7\nhttps://www.lysator.liu.se/c/pikestyle.html",
      "parentUuid": "cf769583_5538ec39",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_35bb7029",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:28:19Z",
      "side": 1,
      "message": "This is short enough. None of the two docs (one is for C, so it doesn\u0027t count) explicitly force the issue on 1 char, except for loop vars, which I agree with.\n\nMy point here is that this kind of review is unnecessarily nitpicky and does not accomplish anything (unless slowing down progress is the goal).\n\nI\u0027m going to push back on this type of micro-managing CLs. There\u0027s gotta be some freedom in naming variables, even in Go.\n\nstr is pretty short.",
      "parentUuid": "cf24d597_c587da07",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f0f05e3_59c7633c",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T22:15:22Z",
      "side": 1,
      "message": "s/newEndPt/parsed/",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_f501f85c",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:03:22Z",
      "side": 1,
      "message": "Changed to parsedEndPt.",
      "parentUuid": "4f0f05e3_59c7633c",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf24d597_e58cd62c",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 5020
      },
      "writtenOn": "2016-07-28T23:12:41Z",
      "side": 1,
      "message": "this whole function is about marshaling endpoints, and it is the return value from ParseEndpoint. what information does \u0027EndPt\u0027 add to this name? it is only used here and in the next assignment. again \"newEndPt :\u003d ParseEndPoint\" stutters; \"endpoint endpoint\". try reading it out loud",
      "parentUuid": "cf769583_f501f85c",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf769583_d58cfc85",
        "filename": "upspin/endpoint.go",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 5015
      },
      "writtenOn": "2016-07-28T23:28:19Z",
      "side": 1,
      "message": "Parsed stutters too. parsed \u003d parsed endpoint.\n\nHow about p?\n\nChanged to p.",
      "parentUuid": "cf24d597_e58cd62c",
      "revId": "fcc4ff92fa2372564b8ad46cd5462cb7d97f61a1",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}