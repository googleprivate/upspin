// Code generated by protoc-gen-go.
// source: testserver.proto
// DO NOT EDIT!

/*
Package prototest is a generated protocol buffer package.

It is generated from these files:
	testserver.proto

It has these top-level messages:
	DoATrumpRequest
	DoATrumpResponse
*/
package prototest

import proto "github.com/golang/protobuf/proto"
import proto1 "upspin.io/upspin/proto/upspin.pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type DoATrumpRequest struct {
	PeopleDemand string `protobuf:"bytes,1,opt,name=people_demand" json:"people_demand,omitempty"`
}

func (m *DoATrumpRequest) Reset()         { *m = DoATrumpRequest{} }
func (m *DoATrumpRequest) String() string { return proto.CompactTextString(m) }
func (*DoATrumpRequest) ProtoMessage()    {}

type DoATrumpResponse struct {
	TrumpResponse string `protobuf:"bytes,1,opt,name=trump_response" json:"trump_response,omitempty"`
}

func (m *DoATrumpResponse) Reset()         { *m = DoATrumpResponse{} }
func (m *DoATrumpResponse) String() string { return proto.CompactTextString(m) }
func (*DoATrumpResponse) ProtoMessage()    {}

func init() {
}

// Client API for TestService service

type TestServiceClient interface {
	Authenticate(ctx context.Context, in *proto1.AuthenticateRequest, opts ...grpc.CallOption) (*proto1.AuthenticateResponse, error)
	Ping(ctx context.Context, in *proto1.PingRequest, opts ...grpc.CallOption) (*proto1.PingResponse, error)
	DoATrump(ctx context.Context, in *DoATrumpRequest, opts ...grpc.CallOption) (*DoATrumpResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Authenticate(ctx context.Context, in *proto1.AuthenticateRequest, opts ...grpc.CallOption) (*proto1.AuthenticateResponse, error) {
	out := new(proto1.AuthenticateResponse)
	err := grpc.Invoke(ctx, "/prototest.TestService/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Ping(ctx context.Context, in *proto1.PingRequest, opts ...grpc.CallOption) (*proto1.PingResponse, error) {
	out := new(proto1.PingResponse)
	err := grpc.Invoke(ctx, "/prototest.TestService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DoATrump(ctx context.Context, in *DoATrumpRequest, opts ...grpc.CallOption) (*DoATrumpResponse, error) {
	out := new(DoATrumpResponse)
	err := grpc.Invoke(ctx, "/prototest.TestService/DoATrump", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	Authenticate(context.Context, *proto1.AuthenticateRequest) (*proto1.AuthenticateResponse, error)
	Ping(context.Context, *proto1.PingRequest) (*proto1.PingResponse, error)
	DoATrump(context.Context, *DoATrumpRequest) (*DoATrumpResponse, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Authenticate_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(proto1.AuthenticateRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TestServiceServer).Authenticate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TestService_Ping_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(proto1.PingRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TestServiceServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TestService_DoATrump_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(DoATrumpRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TestServiceServer).DoATrump(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prototest.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _TestService_Authenticate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TestService_Ping_Handler,
		},
		{
			MethodName: "DoATrump",
			Handler:    _TestService_DoATrump_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
