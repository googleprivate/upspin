// Code generated by protoc-gen-go.
// source: testserver.proto
// DO NOT EDIT!

/*
Package prototest is a generated protocol buffer package.

It is generated from these files:
	testserver.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
*/
package prototest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "upspin.googlesource.com/upspin.git/upspin/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type HelloRequest struct {
	Hello string `protobuf:"bytes,1,opt,name=hello" json:"hello,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloResponse struct {
	Hello string `protobuf:"bytes,1,opt,name=hello" json:"hello,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "prototest.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "prototest.HelloResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for TestService service

type TestServiceClient interface {
	Authenticate(ctx context.Context, in *proto1.AuthenticateRequest, opts ...grpc.CallOption) (*proto1.AuthenticateResponse, error)
	Ping(ctx context.Context, in *proto1.PingRequest, opts ...grpc.CallOption) (*proto1.PingResponse, error)
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Authenticate(ctx context.Context, in *proto1.AuthenticateRequest, opts ...grpc.CallOption) (*proto1.AuthenticateResponse, error) {
	out := new(proto1.AuthenticateResponse)
	err := grpc.Invoke(ctx, "/prototest.TestService/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Ping(ctx context.Context, in *proto1.PingRequest, opts ...grpc.CallOption) (*proto1.PingResponse, error) {
	out := new(proto1.PingResponse)
	err := grpc.Invoke(ctx, "/prototest.TestService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/prototest.TestService/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	Authenticate(context.Context, *proto1.AuthenticateRequest) (*proto1.AuthenticateResponse, error)
	Ping(context.Context, *proto1.PingRequest) (*proto1.PingResponse, error)
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prototest.TestService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Authenticate(ctx, req.(*proto1.AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prototest.TestService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Ping(ctx, req.(*proto1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prototest.TestService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prototest.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _TestService_Authenticate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TestService_Ping_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _TestService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x50, 0xcd, 0x4a, 0xc4, 0x30,
	0x10, 0xb6, 0xe0, 0x0a, 0x3b, 0xae, 0x20, 0xa3, 0xe0, 0x12, 0x2f, 0x52, 0x14, 0x3c, 0x65, 0x51,
	0xaf, 0x7b, 0xf1, 0xa6, 0x37, 0x59, 0x7d, 0x01, 0x0d, 0x43, 0x37, 0x50, 0x33, 0x31, 0x3f, 0xbe,
	0xa3, 0x6f, 0x65, 0x9b, 0x26, 0xa5, 0x62, 0x4f, 0xc9, 0xf7, 0x37, 0xdf, 0x24, 0x70, 0x1a, 0xc8,
	0x07, 0x4f, 0xee, 0x9b, 0x9c, 0xb4, 0x8e, 0x03, 0xe3, 0x32, 0x1d, 0x3d, 0x2d, 0xb6, 0xd1, 0x7a,
	0xab, 0x8d, 0x6c, 0x98, 0x9b, 0x96, 0x3c, 0x47, 0xa7, 0x48, 0x2a, 0xfe, 0xdc, 0x14, 0x5e, 0x87,
	0x7c, 0xdd, 0xa4, 0x50, 0xe1, 0x13, 0xa8, 0xaf, 0x61, 0xf5, 0x44, 0x6d, 0xcb, 0x3b, 0xfa, 0x8a,
	0xdd, 0x34, 0x3c, 0x87, 0xc5, 0xbe, 0xc7, 0xeb, 0xea, 0xaa, 0xba, 0x5d, 0xee, 0x06, 0x50, 0xdf,
	0xc0, 0x49, 0x76, 0x79, 0xcb, 0xc6, 0xd3, 0xbc, 0xed, 0xfe, 0xa7, 0x82, 0xe3, 0xb7, 0x6e, 0xca,
	0x6b, 0xb7, 0xaa, 0x56, 0x84, 0xcf, 0xb0, 0x7a, 0x8c, 0x61, 0x4f, 0x26, 0x68, 0xf5, 0x1e, 0x08,
	0xc5, 0x50, 0x2a, 0xa7, 0x64, 0x2e, 0x16, 0x97, 0xb3, 0xda, 0x50, 0x57, 0x1f, 0xe0, 0x1d, 0x1c,
	0xbe, 0x68, 0xd3, 0x20, 0x66, 0x5b, 0x0f, 0x4a, 0xf4, 0xec, 0x0f, 0x37, 0x46, 0xb6, 0xb0, 0x48,
	0x4b, 0xe3, 0x85, 0x1c, 0x7f, 0x4b, 0x4e, 0x1f, 0x2b, 0xd6, 0xff, 0x85, 0x92, 0xfe, 0x38, 0x4a,
	0xd2, 0xc3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0xeb, 0x81, 0xa2, 0x7c, 0x01, 0x00, 0x00,
}
