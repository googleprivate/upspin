// Copyright 2016 The Upspin Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package proto;

// Endpoint mirrors upspin.Endpoint.
message Endpoint {
    int32 transport = 1;
    string net_addr = 2;
}

// Location mirrors upspin.Location.
message Location {
    Endpoint endpoint = 1;
    string reference = 2;
}

// The Service interface.

message AuthenticateRequest {
    string user_name = 1;
    string now = 2;
    Signature signature = 3;
}

message Signature {
    string r = 1;
    string s = 2;
}

message AuthenticateResponse {
    string token = 1;
    bytes Error = 2;
}

message ConfigureRequest {
    repeated string options = 1;
}

message ConfigureResponse {
    bytes Error = 1;
}

message EndpointRequest {
}

message EndpointResponse {
    Endpoint endpoint = 1;
}

message PingRequest {
    int32 ping_sequence = 1;
}

message PingResponse {
    int32 ping_sequence = 1;
}

// The Store interface.

message StoreGetRequest {
    string reference = 1;
}

message StoreGetResponse {
    bytes data = 1;
    repeated Location locations = 2;
    bytes Error = 3;
}

message StorePutRequest {
    bytes data = 1;
}

message StorePutResponse {
    string reference = 1;
    bytes Error = 2;
}

message StoreDeleteRequest {
    string reference = 1;
}

message StoreDeleteResponse {
    bytes Error = 1;
}

service Store {
    // Service methods:
    rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse) {}
    rpc Configure (ConfigureRequest) returns (ConfigureResponse) {}
    rpc Endpoint (EndpointRequest) returns (EndpointResponse) {}
    rpc Ping (PingRequest) returns (PingResponse) {}

    rpc Get (StoreGetRequest) returns (StoreGetResponse) {}
    rpc Put (StorePutRequest) returns (StorePutResponse) {}
    rpc Delete (StoreDeleteRequest) returns (StoreDeleteResponse) {}
}

// The Key interface.

message KeyLookupRequest {
    string UserName = 1;
}

message KeyLookupResponse {
    repeated Endpoint Endpoints = 1;
    repeated string PublicKeys = 2;
    bytes Error = 3;
}

service Key {
    // Service methods:
    rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse) {}
    rpc Configure (ConfigureRequest) returns (ConfigureResponse) {}
    rpc Endpoint (EndpointRequest) returns (EndpointResponse) {}
    rpc Ping (PingRequest) returns (PingResponse) {}

    rpc Lookup (KeyLookupRequest) returns (KeyLookupResponse) {}
}

// The DirServer interface.
// DirEntry values are stored as bytes, for simple and fast marshaling.
// (The upspin.DirEntry type has a Marshal method that returns a []byte;
// the alternative is to create a DirEntry proto message and copy the fields
// from one struct to the other, which is needless busywork.)

message DirLookupRequest {
    string Name = 1;
}

message DirLookupResponse {
    bytes Entry = 1;
    bytes Error = 2;
}

message DirPutRequest {
    bytes Entry = 1;
}

message DirPutResponse {
    bytes Error = 1;
}

message DirMakeDirectoryRequest {
    string Name = 1;
}

message DirMakeDirectoryResponse {
    Location Location = 1;
    bytes Error = 2;
}

message DirGlobRequest {
    string Pattern = 1;
}

message DirGlobResponse {
    repeated bytes Entries = 1;
    bytes Error = 2;
}

message DirDeleteRequest {
    string Name = 1;
}

message DirDeleteResponse {
    bytes Error = 1;
}

message DirWhichAccessRequest {
    string Name = 1;
}

message DirWhichAccessResponse {
    string Name = 1;
    bytes Error = 2;
}

service Dir{
    // Service methods:
    rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse) {}
    rpc Configure (ConfigureRequest) returns (ConfigureResponse) {}
    rpc Endpoint (EndpointRequest) returns (EndpointResponse) {}
    rpc Ping (PingRequest) returns (PingResponse) {}

    rpc Lookup (DirLookupRequest) returns (DirLookupResponse) {}
    rpc Put (DirPutRequest) returns (DirPutResponse) {}
    rpc MakeDirectory (DirMakeDirectoryRequest) returns (DirMakeDirectoryResponse) {}
    rpc Glob (DirGlobRequest) returns (DirGlobResponse) {}
    rpc Delete (DirDeleteRequest) returns (DirDeleteResponse) {}
    rpc WhichAccess (DirWhichAccessRequest) returns (DirWhichAccessResponse) {}
}
