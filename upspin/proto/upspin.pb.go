// Code generated by protoc-gen-go.
// source: upspin.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	upspin.proto

It has these top-level messages:
	Endpoint
	Location
	AuthenticateRequest
	Signature
	AuthenticateResponse
	ConfigureRequest
	ConfigureResponse
	EndpointRequest
	EndpointResponse
	PingRequest
	PingResponse
	StoreGetRequest
	StoreGetResponse
	StorePutRequest
	StorePutResponse
	StoreDeleteRequest
	StoreDeleteResponse
	UserLookupRequest
	UserLookupResponse
	DirectoryLookupRequest
	DirectoryLookupResponse
	DirectoryPutRequest
	DirectoryPutResponse
	DirectoryMakeDirectoryRequest
	DirectoryMakeDirectoryResponse
	DirectoryGlobRequest
	DirectoryGlobResponse
	DirectoryDeleteRequest
	DirectoryDeleteResponse
	DirectoryWhichAccessRequest
	DirectoryWhichAccessResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Endpoint mirrors upspin.Endpoint.
type Endpoint struct {
	Transport int32  `protobuf:"varint,1,opt,name=transport" json:"transport,omitempty"`
	NetAddr   string `protobuf:"bytes,2,opt,name=net_addr,json=netAddr" json:"net_addr,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto1.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Location mirrors upspin.Location.
type Location struct {
	Endpoint  *Endpoint `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	Reference string    `protobuf:"bytes,2,opt,name=reference" json:"reference,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto1.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Location) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type AuthenticateRequest struct {
	UserName  string     `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Now       string     `protobuf:"bytes,2,opt,name=now" json:"now,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (m *AuthenticateRequest) Reset()                    { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string            { return proto1.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()               {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthenticateRequest) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Signature struct {
	R string `protobuf:"bytes,1,opt,name=r" json:"r,omitempty"`
	S string `protobuf:"bytes,2,opt,name=s" json:"s,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto1.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AuthenticateResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AuthenticateResponse) Reset()                    { *m = AuthenticateResponse{} }
func (m *AuthenticateResponse) String() string            { return proto1.CompactTextString(m) }
func (*AuthenticateResponse) ProtoMessage()               {}
func (*AuthenticateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConfigureRequest struct {
	Options []string `protobuf:"bytes,1,rep,name=options" json:"options,omitempty"`
}

func (m *ConfigureRequest) Reset()                    { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()               {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ConfigureResponse struct {
}

func (m *ConfigureResponse) Reset()                    { *m = ConfigureResponse{} }
func (m *ConfigureResponse) String() string            { return proto1.CompactTextString(m) }
func (*ConfigureResponse) ProtoMessage()               {}
func (*ConfigureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type EndpointRequest struct {
}

func (m *EndpointRequest) Reset()                    { *m = EndpointRequest{} }
func (m *EndpointRequest) String() string            { return proto1.CompactTextString(m) }
func (*EndpointRequest) ProtoMessage()               {}
func (*EndpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type EndpointResponse struct {
	Endpoint *Endpoint `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *EndpointResponse) Reset()                    { *m = EndpointResponse{} }
func (m *EndpointResponse) String() string            { return proto1.CompactTextString(m) }
func (*EndpointResponse) ProtoMessage()               {}
func (*EndpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EndpointResponse) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type PingRequest struct {
	PingSequence int32 `protobuf:"varint,1,opt,name=ping_sequence,json=pingSequence" json:"ping_sequence,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto1.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type PingResponse struct {
	PingSequence int32 `protobuf:"varint,1,opt,name=ping_sequence,json=pingSequence" json:"ping_sequence,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto1.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type StoreGetRequest struct {
	Reference string `protobuf:"bytes,1,opt,name=reference" json:"reference,omitempty"`
}

func (m *StoreGetRequest) Reset()                    { *m = StoreGetRequest{} }
func (m *StoreGetRequest) String() string            { return proto1.CompactTextString(m) }
func (*StoreGetRequest) ProtoMessage()               {}
func (*StoreGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type StoreGetResponse struct {
	Data      []byte      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Locations []*Location `protobuf:"bytes,2,rep,name=locations" json:"locations,omitempty"`
}

func (m *StoreGetResponse) Reset()                    { *m = StoreGetResponse{} }
func (m *StoreGetResponse) String() string            { return proto1.CompactTextString(m) }
func (*StoreGetResponse) ProtoMessage()               {}
func (*StoreGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StoreGetResponse) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

type StorePutRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StorePutRequest) Reset()                    { *m = StorePutRequest{} }
func (m *StorePutRequest) String() string            { return proto1.CompactTextString(m) }
func (*StorePutRequest) ProtoMessage()               {}
func (*StorePutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type StorePutResponse struct {
	Reference string `protobuf:"bytes,1,opt,name=reference" json:"reference,omitempty"`
}

func (m *StorePutResponse) Reset()                    { *m = StorePutResponse{} }
func (m *StorePutResponse) String() string            { return proto1.CompactTextString(m) }
func (*StorePutResponse) ProtoMessage()               {}
func (*StorePutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type StoreDeleteRequest struct {
	Reference string `protobuf:"bytes,1,opt,name=reference" json:"reference,omitempty"`
}

func (m *StoreDeleteRequest) Reset()                    { *m = StoreDeleteRequest{} }
func (m *StoreDeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*StoreDeleteRequest) ProtoMessage()               {}
func (*StoreDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type StoreDeleteResponse struct {
}

func (m *StoreDeleteResponse) Reset()                    { *m = StoreDeleteResponse{} }
func (m *StoreDeleteResponse) String() string            { return proto1.CompactTextString(m) }
func (*StoreDeleteResponse) ProtoMessage()               {}
func (*StoreDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type UserLookupRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
}

func (m *UserLookupRequest) Reset()                    { *m = UserLookupRequest{} }
func (m *UserLookupRequest) String() string            { return proto1.CompactTextString(m) }
func (*UserLookupRequest) ProtoMessage()               {}
func (*UserLookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type UserLookupResponse struct {
	Endpoints  []*Endpoint `protobuf:"bytes,1,rep,name=Endpoints,json=endpoints" json:"Endpoints,omitempty"`
	PublicKeys []string    `protobuf:"bytes,2,rep,name=PublicKeys,json=publicKeys" json:"PublicKeys,omitempty"`
}

func (m *UserLookupResponse) Reset()                    { *m = UserLookupResponse{} }
func (m *UserLookupResponse) String() string            { return proto1.CompactTextString(m) }
func (*UserLookupResponse) ProtoMessage()               {}
func (*UserLookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UserLookupResponse) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type DirectoryLookupRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *DirectoryLookupRequest) Reset()                    { *m = DirectoryLookupRequest{} }
func (m *DirectoryLookupRequest) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryLookupRequest) ProtoMessage()               {}
func (*DirectoryLookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type DirectoryLookupResponse struct {
	Entry []byte `protobuf:"bytes,1,opt,name=Entry,json=entry,proto3" json:"Entry,omitempty"`
}

func (m *DirectoryLookupResponse) Reset()                    { *m = DirectoryLookupResponse{} }
func (m *DirectoryLookupResponse) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryLookupResponse) ProtoMessage()               {}
func (*DirectoryLookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type DirectoryPutRequest struct {
	Entry []byte `protobuf:"bytes,1,opt,name=Entry,json=entry,proto3" json:"Entry,omitempty"`
}

func (m *DirectoryPutRequest) Reset()                    { *m = DirectoryPutRequest{} }
func (m *DirectoryPutRequest) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryPutRequest) ProtoMessage()               {}
func (*DirectoryPutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type DirectoryPutResponse struct {
}

func (m *DirectoryPutResponse) Reset()                    { *m = DirectoryPutResponse{} }
func (m *DirectoryPutResponse) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryPutResponse) ProtoMessage()               {}
func (*DirectoryPutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type DirectoryMakeDirectoryRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *DirectoryMakeDirectoryRequest) Reset()                    { *m = DirectoryMakeDirectoryRequest{} }
func (m *DirectoryMakeDirectoryRequest) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryMakeDirectoryRequest) ProtoMessage()               {}
func (*DirectoryMakeDirectoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type DirectoryMakeDirectoryResponse struct {
	Location *Location `protobuf:"bytes,1,opt,name=Location,json=location" json:"Location,omitempty"`
}

func (m *DirectoryMakeDirectoryResponse) Reset()                    { *m = DirectoryMakeDirectoryResponse{} }
func (m *DirectoryMakeDirectoryResponse) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryMakeDirectoryResponse) ProtoMessage()               {}
func (*DirectoryMakeDirectoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DirectoryMakeDirectoryResponse) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type DirectoryGlobRequest struct {
	Pattern string `protobuf:"bytes,1,opt,name=Pattern,json=pattern" json:"Pattern,omitempty"`
}

func (m *DirectoryGlobRequest) Reset()                    { *m = DirectoryGlobRequest{} }
func (m *DirectoryGlobRequest) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryGlobRequest) ProtoMessage()               {}
func (*DirectoryGlobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type DirectoryGlobResponse struct {
	Entries [][]byte `protobuf:"bytes,1,rep,name=Entries,json=entries,proto3" json:"Entries,omitempty"`
}

func (m *DirectoryGlobResponse) Reset()                    { *m = DirectoryGlobResponse{} }
func (m *DirectoryGlobResponse) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryGlobResponse) ProtoMessage()               {}
func (*DirectoryGlobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type DirectoryDeleteRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *DirectoryDeleteRequest) Reset()                    { *m = DirectoryDeleteRequest{} }
func (m *DirectoryDeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryDeleteRequest) ProtoMessage()               {}
func (*DirectoryDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type DirectoryDeleteResponse struct {
}

func (m *DirectoryDeleteResponse) Reset()                    { *m = DirectoryDeleteResponse{} }
func (m *DirectoryDeleteResponse) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryDeleteResponse) ProtoMessage()               {}
func (*DirectoryDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type DirectoryWhichAccessRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *DirectoryWhichAccessRequest) Reset()                    { *m = DirectoryWhichAccessRequest{} }
func (m *DirectoryWhichAccessRequest) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryWhichAccessRequest) ProtoMessage()               {}
func (*DirectoryWhichAccessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type DirectoryWhichAccessResponse struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *DirectoryWhichAccessResponse) Reset()                    { *m = DirectoryWhichAccessResponse{} }
func (m *DirectoryWhichAccessResponse) String() string            { return proto1.CompactTextString(m) }
func (*DirectoryWhichAccessResponse) ProtoMessage()               {}
func (*DirectoryWhichAccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func init() {
	proto1.RegisterType((*Endpoint)(nil), "proto.Endpoint")
	proto1.RegisterType((*Location)(nil), "proto.Location")
	proto1.RegisterType((*AuthenticateRequest)(nil), "proto.AuthenticateRequest")
	proto1.RegisterType((*Signature)(nil), "proto.Signature")
	proto1.RegisterType((*AuthenticateResponse)(nil), "proto.AuthenticateResponse")
	proto1.RegisterType((*ConfigureRequest)(nil), "proto.ConfigureRequest")
	proto1.RegisterType((*ConfigureResponse)(nil), "proto.ConfigureResponse")
	proto1.RegisterType((*EndpointRequest)(nil), "proto.EndpointRequest")
	proto1.RegisterType((*EndpointResponse)(nil), "proto.EndpointResponse")
	proto1.RegisterType((*PingRequest)(nil), "proto.PingRequest")
	proto1.RegisterType((*PingResponse)(nil), "proto.PingResponse")
	proto1.RegisterType((*StoreGetRequest)(nil), "proto.StoreGetRequest")
	proto1.RegisterType((*StoreGetResponse)(nil), "proto.StoreGetResponse")
	proto1.RegisterType((*StorePutRequest)(nil), "proto.StorePutRequest")
	proto1.RegisterType((*StorePutResponse)(nil), "proto.StorePutResponse")
	proto1.RegisterType((*StoreDeleteRequest)(nil), "proto.StoreDeleteRequest")
	proto1.RegisterType((*StoreDeleteResponse)(nil), "proto.StoreDeleteResponse")
	proto1.RegisterType((*UserLookupRequest)(nil), "proto.UserLookupRequest")
	proto1.RegisterType((*UserLookupResponse)(nil), "proto.UserLookupResponse")
	proto1.RegisterType((*DirectoryLookupRequest)(nil), "proto.DirectoryLookupRequest")
	proto1.RegisterType((*DirectoryLookupResponse)(nil), "proto.DirectoryLookupResponse")
	proto1.RegisterType((*DirectoryPutRequest)(nil), "proto.DirectoryPutRequest")
	proto1.RegisterType((*DirectoryPutResponse)(nil), "proto.DirectoryPutResponse")
	proto1.RegisterType((*DirectoryMakeDirectoryRequest)(nil), "proto.DirectoryMakeDirectoryRequest")
	proto1.RegisterType((*DirectoryMakeDirectoryResponse)(nil), "proto.DirectoryMakeDirectoryResponse")
	proto1.RegisterType((*DirectoryGlobRequest)(nil), "proto.DirectoryGlobRequest")
	proto1.RegisterType((*DirectoryGlobResponse)(nil), "proto.DirectoryGlobResponse")
	proto1.RegisterType((*DirectoryDeleteRequest)(nil), "proto.DirectoryDeleteRequest")
	proto1.RegisterType((*DirectoryDeleteResponse)(nil), "proto.DirectoryDeleteResponse")
	proto1.RegisterType((*DirectoryWhichAccessRequest)(nil), "proto.DirectoryWhichAccessRequest")
	proto1.RegisterType((*DirectoryWhichAccessResponse)(nil), "proto.DirectoryWhichAccessResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Store service

type StoreClient interface {
	// Service methods:
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Get(ctx context.Context, in *StoreGetRequest, opts ...grpc.CallOption) (*StoreGetResponse, error)
	Put(ctx context.Context, in *StorePutRequest, opts ...grpc.CallOption) (*StorePutResponse, error)
	Delete(ctx context.Context, in *StoreDeleteRequest, opts ...grpc.CallOption) (*StoreDeleteResponse, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error) {
	out := new(EndpointResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Endpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Get(ctx context.Context, in *StoreGetRequest, opts ...grpc.CallOption) (*StoreGetResponse, error) {
	out := new(StoreGetResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Put(ctx context.Context, in *StorePutRequest, opts ...grpc.CallOption) (*StorePutResponse, error) {
	out := new(StorePutResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Delete(ctx context.Context, in *StoreDeleteRequest, opts ...grpc.CallOption) (*StoreDeleteResponse, error) {
	out := new(StoreDeleteResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreServer interface {
	// Service methods:
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	Endpoint(context.Context, *EndpointRequest) (*EndpointResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Get(context.Context, *StoreGetRequest) (*StoreGetResponse, error)
	Put(context.Context, *StorePutRequest) (*StorePutResponse, error)
	Delete(context.Context, *StoreDeleteRequest) (*StoreDeleteResponse, error)
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Store/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Store/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Endpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Endpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Store/Endpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Endpoint(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Store/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Store/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Get(ctx, req.(*StoreGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Store/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Put(ctx, req.(*StorePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Store/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Delete(ctx, req.(*StoreDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Store_Authenticate_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Store_Configure_Handler,
		},
		{
			MethodName: "Endpoint",
			Handler:    _Store_Endpoint_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Store_Ping_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Store_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Store_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Store_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for User service

type UserClient interface {
	// Service methods:
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Lookup(ctx context.Context, in *UserLookupRequest, opts ...grpc.CallOption) (*UserLookupResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/proto.User/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := grpc.Invoke(ctx, "/proto.User/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error) {
	out := new(EndpointResponse)
	err := grpc.Invoke(ctx, "/proto.User/Endpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/proto.User/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Lookup(ctx context.Context, in *UserLookupRequest, opts ...grpc.CallOption) (*UserLookupResponse, error) {
	out := new(UserLookupResponse)
	err := grpc.Invoke(ctx, "/proto.User/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	// Service methods:
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	Endpoint(context.Context, *EndpointRequest) (*EndpointResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Lookup(context.Context, *UserLookupRequest) (*UserLookupResponse, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Endpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Endpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/Endpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Endpoint(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Lookup(ctx, req.(*UserLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _User_Authenticate_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _User_Configure_Handler,
		},
		{
			MethodName: "Endpoint",
			Handler:    _User_Endpoint_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _User_Ping_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _User_Lookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Directory service

type DirectoryClient interface {
	// Service methods:
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Lookup(ctx context.Context, in *DirectoryLookupRequest, opts ...grpc.CallOption) (*DirectoryLookupResponse, error)
	Put(ctx context.Context, in *DirectoryPutRequest, opts ...grpc.CallOption) (*DirectoryPutResponse, error)
	MakeDirectory(ctx context.Context, in *DirectoryMakeDirectoryRequest, opts ...grpc.CallOption) (*DirectoryMakeDirectoryResponse, error)
	Glob(ctx context.Context, in *DirectoryGlobRequest, opts ...grpc.CallOption) (*DirectoryGlobResponse, error)
	Delete(ctx context.Context, in *DirectoryDeleteRequest, opts ...grpc.CallOption) (*DirectoryDeleteResponse, error)
	WhichAccess(ctx context.Context, in *DirectoryWhichAccessRequest, opts ...grpc.CallOption) (*DirectoryWhichAccessResponse, error)
}

type directoryClient struct {
	cc *grpc.ClientConn
}

func NewDirectoryClient(cc *grpc.ClientConn) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error) {
	out := new(EndpointResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Endpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Lookup(ctx context.Context, in *DirectoryLookupRequest, opts ...grpc.CallOption) (*DirectoryLookupResponse, error) {
	out := new(DirectoryLookupResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Put(ctx context.Context, in *DirectoryPutRequest, opts ...grpc.CallOption) (*DirectoryPutResponse, error) {
	out := new(DirectoryPutResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) MakeDirectory(ctx context.Context, in *DirectoryMakeDirectoryRequest, opts ...grpc.CallOption) (*DirectoryMakeDirectoryResponse, error) {
	out := new(DirectoryMakeDirectoryResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/MakeDirectory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Glob(ctx context.Context, in *DirectoryGlobRequest, opts ...grpc.CallOption) (*DirectoryGlobResponse, error) {
	out := new(DirectoryGlobResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Glob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Delete(ctx context.Context, in *DirectoryDeleteRequest, opts ...grpc.CallOption) (*DirectoryDeleteResponse, error) {
	out := new(DirectoryDeleteResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) WhichAccess(ctx context.Context, in *DirectoryWhichAccessRequest, opts ...grpc.CallOption) (*DirectoryWhichAccessResponse, error) {
	out := new(DirectoryWhichAccessResponse)
	err := grpc.Invoke(ctx, "/proto.Directory/WhichAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Directory service

type DirectoryServer interface {
	// Service methods:
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	Endpoint(context.Context, *EndpointRequest) (*EndpointResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Lookup(context.Context, *DirectoryLookupRequest) (*DirectoryLookupResponse, error)
	Put(context.Context, *DirectoryPutRequest) (*DirectoryPutResponse, error)
	MakeDirectory(context.Context, *DirectoryMakeDirectoryRequest) (*DirectoryMakeDirectoryResponse, error)
	Glob(context.Context, *DirectoryGlobRequest) (*DirectoryGlobResponse, error)
	Delete(context.Context, *DirectoryDeleteRequest) (*DirectoryDeleteResponse, error)
	WhichAccess(context.Context, *DirectoryWhichAccessRequest) (*DirectoryWhichAccessResponse, error)
}

func RegisterDirectoryServer(s *grpc.Server, srv DirectoryServer) {
	s.RegisterService(&_Directory_serviceDesc, srv)
}

func _Directory_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Endpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Endpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Endpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Endpoint(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Lookup(ctx, req.(*DirectoryLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Put(ctx, req.(*DirectoryPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_MakeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryMakeDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).MakeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/MakeDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).MakeDirectory(ctx, req.(*DirectoryMakeDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Glob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryGlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Glob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Glob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Glob(ctx, req.(*DirectoryGlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Delete(ctx, req.(*DirectoryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_WhichAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryWhichAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).WhichAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Directory/WhichAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).WhichAccess(ctx, req.(*DirectoryWhichAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Directory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Directory_Authenticate_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Directory_Configure_Handler,
		},
		{
			MethodName: "Endpoint",
			Handler:    _Directory_Endpoint_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Directory_Ping_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Directory_Lookup_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Directory_Put_Handler,
		},
		{
			MethodName: "MakeDirectory",
			Handler:    _Directory_MakeDirectory_Handler,
		},
		{
			MethodName: "Glob",
			Handler:    _Directory_Glob_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Directory_Delete_Handler,
		},
		{
			MethodName: "WhichAccess",
			Handler:    _Directory_WhichAccess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x55, 0x5f, 0x4f, 0xe3, 0x46,
	0x10, 0x3f, 0x5f, 0x12, 0x12, 0x0f, 0x39, 0x11, 0x36, 0x1c, 0x24, 0x0e, 0x17, 0xa1, 0xbd, 0x9e,
	0x7a, 0xd2, 0x71, 0x70, 0x84, 0x97, 0xbe, 0x54, 0xd7, 0x08, 0x10, 0x42, 0x85, 0x2a, 0x32, 0x8a,
	0xda, 0xa7, 0x22, 0xe3, 0x2c, 0xc1, 0x22, 0xec, 0xba, 0xeb, 0xb5, 0x2a, 0x3e, 0x5c, 0x5f, 0xfb,
	0x3d, 0xfa, 0x4d, 0xaa, 0xb5, 0xd7, 0xeb, 0xb5, 0x63, 0xd2, 0xde, 0x33, 0x4f, 0xc9, 0xcc, 0xfc,
	0x7e, 0x33, 0xe3, 0xf9, 0xb7, 0xd0, 0x8e, 0xc3, 0x28, 0x0c, 0xe8, 0x41, 0xc8, 0x99, 0x60, 0xa8,
	0x91, 0xfc, 0xe0, 0x13, 0x68, 0x9d, 0xd1, 0x59, 0xc8, 0x02, 0x2a, 0xd0, 0x2e, 0xd8, 0x82, 0x7b,
	0x34, 0x0a, 0x19, 0x17, 0x3d, 0x6b, 0xcf, 0xfa, 0xd8, 0x70, 0x73, 0x05, 0xea, 0x43, 0x8b, 0x12,
	0x71, 0xe3, 0xcd, 0x66, 0xbc, 0xf7, 0x7a, 0xcf, 0xfa, 0x68, 0xbb, 0x4d, 0x4a, 0xc4, 0x78, 0x36,
	0xe3, 0x78, 0x0a, 0xad, 0x4b, 0xe6, 0x7b, 0x22, 0x60, 0x14, 0x7d, 0x82, 0x16, 0x51, 0x0e, 0x13,
	0x1f, 0xeb, 0xa3, 0x8d, 0x34, 0xe2, 0x41, 0x16, 0xc7, 0xd5, 0x00, 0x19, 0x91, 0x93, 0x3b, 0xc2,
	0x09, 0xf5, 0x89, 0x72, 0x9a, 0x2b, 0xb0, 0x80, 0xee, 0x38, 0x16, 0xf7, 0x84, 0x8a, 0xc0, 0xf7,
	0x04, 0x71, 0xc9, 0x1f, 0x31, 0x89, 0x04, 0x1a, 0x80, 0x1d, 0x47, 0x84, 0xdf, 0x50, 0xef, 0x91,
	0x24, 0x21, 0x6c, 0xb7, 0x25, 0x15, 0xbf, 0x78, 0x8f, 0x04, 0x75, 0xa0, 0x46, 0xd9, 0x9f, 0xca,
	0x97, 0xfc, 0x8b, 0x0e, 0xc0, 0x8e, 0x82, 0x39, 0xf5, 0x44, 0xcc, 0x49, 0xaf, 0x96, 0x64, 0xd4,
	0x51, 0x19, 0x5d, 0x67, 0x7a, 0x37, 0x87, 0xe0, 0xef, 0xc1, 0xd6, 0x7a, 0xd4, 0x06, 0x8b, 0xab,
	0x18, 0x16, 0x97, 0x52, 0xa4, 0x5c, 0x5b, 0x11, 0xde, 0x87, 0xad, 0x62, 0x7a, 0x51, 0xc8, 0x68,
	0x44, 0xd0, 0x16, 0x34, 0x04, 0x7b, 0x20, 0x54, 0xf1, 0x52, 0x01, 0xef, 0x43, 0xe7, 0x84, 0xd1,
	0xbb, 0x60, 0x2e, 0xc3, 0xa9, 0x2f, 0xe9, 0x41, 0x93, 0x85, 0xb2, 0x6a, 0x51, 0xcf, 0xda, 0xab,
	0xc9, 0x8a, 0x2a, 0x11, 0x77, 0x61, 0xd3, 0x40, 0xa7, 0x8e, 0xf1, 0x26, 0x6c, 0xe8, 0x1a, 0xa6,
	0x1e, 0xf0, 0x57, 0xe8, 0xe4, 0x2a, 0x15, 0xff, 0x5b, 0x3a, 0x80, 0x47, 0xb0, 0x3e, 0x09, 0xe8,
	0x3c, 0xcb, 0xe8, 0x3d, 0xbc, 0x09, 0x03, 0x3a, 0xbf, 0x89, 0xa4, 0x2c, 0x9b, 0x92, 0x8e, 0x41,
	0x5b, 0x2a, 0xaf, 0x95, 0x0e, 0x1f, 0x43, 0x3b, 0xe5, 0xa8, 0x80, 0xff, 0x8b, 0x74, 0x08, 0x1b,
	0xd7, 0x82, 0x71, 0x72, 0x4e, 0xb2, 0xe4, 0x8b, 0xdd, 0xb7, 0xca, 0xdd, 0x9f, 0x42, 0x27, 0x27,
	0xa8, 0x48, 0x08, 0xea, 0x33, 0x4f, 0x78, 0x09, 0xb8, 0xed, 0x26, 0xff, 0xd1, 0x67, 0xb0, 0x17,
	0x6a, 0xf8, 0x64, 0x73, 0x6a, 0xc6, 0xf7, 0x66, 0x43, 0xe9, 0xe6, 0x08, 0xfc, 0x41, 0xe5, 0x31,
	0x89, 0x75, 0x1e, 0x15, 0x5e, 0xf1, 0x17, 0x15, 0x3d, 0x81, 0xa9, 0xe8, 0xab, 0xf3, 0x1d, 0x01,
	0x4a, 0x18, 0xa7, 0x64, 0x41, 0xf2, 0x61, 0x5d, 0xcd, 0x79, 0x0b, 0xdd, 0x02, 0x47, 0x35, 0xfa,
	0x10, 0x36, 0xa7, 0x11, 0xe1, 0x97, 0x8c, 0x3d, 0xc4, 0x61, 0xe6, 0xc9, 0x81, 0xd6, 0x54, 0x4d,
	0x79, 0x79, 0xea, 0xb1, 0x0f, 0xc8, 0x24, 0xa8, 0x7c, 0x3f, 0x83, 0x9d, 0x75, 0x3c, 0x1d, 0xb0,
	0x8a, 0x49, 0xb0, 0xb3, 0x49, 0x88, 0xd0, 0x10, 0x60, 0x12, 0xdf, 0x2e, 0x02, 0xff, 0x67, 0xf2,
	0x94, 0x56, 0xd2, 0x76, 0x21, 0xd4, 0x1a, 0xbc, 0x0f, 0xdb, 0xa7, 0x01, 0x27, 0xbe, 0x60, 0xfc,
	0xa9, 0x98, 0x1a, 0x82, 0xba, 0x91, 0x56, 0x5d, 0x2e, 0x26, 0x3e, 0x84, 0x9d, 0x25, 0x74, 0xbe,
	0x20, 0x67, 0x54, 0xf0, 0x27, 0x55, 0xf0, 0x06, 0x91, 0x02, 0xfe, 0x04, 0x5d, 0x4d, 0x30, 0x9a,
	0x53, 0x0d, 0xde, 0x86, 0xad, 0x22, 0x58, 0x55, 0xee, 0x18, 0xde, 0x69, 0xfd, 0x95, 0xf7, 0x40,
	0xb4, 0xb0, 0x2a, 0xd5, 0x2b, 0x18, 0x3e, 0x47, 0xca, 0x57, 0x2a, 0x9b, 0xa5, 0xd2, 0x4a, 0xe9,
	0x11, 0x6b, 0x65, 0x23, 0x86, 0xbf, 0x18, 0xb9, 0x9d, 0x2f, 0xd8, 0xad, 0xb1, 0xed, 0x13, 0x4f,
	0x08, 0xc2, 0xb3, 0xcb, 0xd0, 0x0c, 0x53, 0x11, 0x1f, 0xc1, 0xdb, 0x12, 0x43, 0xc5, 0xed, 0x41,
	0x53, 0x7e, 0x7c, 0x40, 0xd2, 0xfe, 0xb5, 0xdd, 0x26, 0x49, 0xc5, 0x42, 0x33, 0x8a, 0x13, 0x57,
	0xf5, 0x85, 0x7d, 0xa3, 0x19, 0xa5, 0x59, 0x3b, 0x82, 0x81, 0x36, 0xfd, 0x7a, 0x1f, 0xf8, 0xf7,
	0x63, 0xdf, 0x27, 0x51, 0xb4, 0xca, 0xdb, 0x08, 0x76, 0xab, 0x29, 0xf9, 0x96, 0x96, 0x39, 0xa3,
	0xbf, 0x6a, 0xd0, 0x48, 0x46, 0x1d, 0x5d, 0x40, 0xdb, 0x3c, 0x9b, 0xc8, 0x51, 0x95, 0xac, 0x38,
	0xf5, 0xce, 0xa0, 0xd2, 0xa6, 0x32, 0x7f, 0x85, 0x7e, 0x02, 0x5b, 0x5f, 0x49, 0xb4, 0xa3, 0xb0,
	0xe5, 0x2b, 0xeb, 0xf4, 0x96, 0x0d, 0xda, 0xc3, 0x8f, 0xc6, 0xf3, 0xb7, 0x5d, 0xde, 0x0d, 0xc5,
	0xdf, 0x59, 0xd2, 0x6b, 0xfa, 0x11, 0xd4, 0xe5, 0x25, 0x44, 0x48, 0x41, 0x8c, 0x53, 0xea, 0x74,
	0x0b, 0x3a, 0x4d, 0xf9, 0x01, 0x6a, 0xe7, 0x24, 0x0f, 0x56, 0xba, 0x89, 0x3a, 0x58, 0xf9, 0xf4,
	0xa5, 0xcc, 0x49, 0x5c, 0x62, 0xe6, 0x8b, 0x52, 0x64, 0x9a, 0x3b, 0xf1, 0x0a, 0x8d, 0x61, 0x2d,
	0xed, 0x3a, 0xea, 0x9b, 0xa0, 0xc2, 0xdc, 0x38, 0x4e, 0x95, 0x29, 0x73, 0x31, 0xfa, 0xfb, 0x35,
	0xd4, 0xe5, 0x89, 0x79, 0xe9, 0xed, 0xfb, 0x0a, 0x6b, 0xe9, 0x35, 0x43, 0x59, 0x5e, 0x4b, 0x97,
	0xda, 0xe9, 0x57, 0x58, 0x74, 0x21, 0xff, 0x69, 0x80, 0xad, 0xb7, 0xe7, 0xa5, 0x57, 0xf3, 0x42,
	0x57, 0xf3, 0x9d, 0x02, 0x54, 0xbf, 0x30, 0xce, 0xf0, 0x39, 0xb3, 0xf1, 0xf9, 0xc9, 0x76, 0x38,
	0x65, 0xa0, 0xb1, 0x21, 0x83, 0x4a, 0x9b, 0xf6, 0xf0, 0x3b, 0xbc, 0x29, 0x5c, 0x7f, 0xf4, 0x5d,
	0x19, 0x5f, 0xf5, 0xa2, 0x38, 0x1f, 0xfe, 0x03, 0xa5, 0xfd, 0x9f, 0x40, 0x5d, 0x1e, 0x77, 0xb4,
	0x94, 0x86, 0xf1, 0x48, 0x38, 0xbb, 0xd5, 0x46, 0xb3, 0x62, 0x6a, 0x95, 0x97, 0x2a, 0x56, 0x5c,
	0xe7, 0xe1, 0x73, 0x66, 0xed, 0xea, 0x37, 0x58, 0x37, 0xae, 0x37, 0xc2, 0x65, 0xc2, 0xf2, 0x6b,
	0xe0, 0xbc, 0x5f, 0x89, 0xc9, 0x3c, 0xdf, 0xae, 0x25, 0xa8, 0xe3, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x49, 0xc5, 0xf0, 0x37, 0x72, 0x0c, 0x00, 0x00,
}
