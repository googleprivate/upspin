{
  "comments": [
    {
      "key": {
        "uuid": "be9287f7_244f9707",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T02:37:28Z",
      "side": 1,
      "message": "It\u0027s definitely way better to use a buffered reader here. You don\u0027t want to do a Read syscall for each byte in the log, that\u0027s gonna be slooooow.\nWas that the problem? Because I can\u0027t really see why it should have been, if it was.",
      "revId": "229b7307230c0c5660b1cb2e4d09ec3c9e83b778",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d5491e8_a92be95b",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-24T02:57:51Z",
      "side": 1,
      "message": "No this was not the original problem. The original problem is on line 558 of the original file. I was ignoring the \"n\" param from r.Read.\n\nSo, I had to implement a readNBytes function (or write an inline loop around r.Read on line 558).\n\nI implemented readNBytes in the most straightforward way. But it was locking up. I thought I had made a dumb mistake somewhere but I couldn\u0027t figure out where. Luckily, I found LimitedReader which composes nicely with ReadAll and is much shorter. But they also lock up if we wrap a buffered reader. So I removed the buffered reader and things worked again.\n\nAny decent operating system has a read ahead buffer and, even better, since this is always moving towards the tail of the file, it\u0027s likely the tail has just been put. True, the syscalls might slow things down a bit, but in the context of reading bytes from disk, is that meaningful? Isn\u0027t os.File buffering already?",
      "parentUuid": "be9287f7_244f9707",
      "revId": "229b7307230c0c5660b1cb2e4d09ec3c9e83b778",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58eef074_b3e9c889",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T03:21:23Z",
      "side": 1,
      "message": "Why do you think locks up with the buffered reader?\nI just made the change myself and found the same thing.\n\nAs far as I know, *os.File is not buffered.",
      "parentUuid": "5d5491e8_a92be95b",
      "revId": "229b7307230c0c5660b1cb2e4d09ec3c9e83b778",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb8ecdd_0ef8db09",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-24T03:33:39Z",
      "side": 1,
      "message": "I don\u0027t know. I\u0027ll spend tomorrow investigating this. It could be my locking, but  Log and LogIndex have very straightforward locking. (lock followed by defer unlock). I\u0027ll take a look to see if there\u0027s any path we end up calling lock from a locked method. But if it\u0027s that, buffering should not prevent the error, maybe mask it. I never get lock ups without buffering.\n\nIf I can\u0027t find a deadlock, I\u0027ll try to isolate this to the smallest piece of code I can, so that if the Go libraries are bad somehow, I will be able to report them with a very small example.",
      "parentUuid": "58eef074_b3e9c889",
      "revId": "229b7307230c0c5660b1cb2e4d09ec3c9e83b778",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e9835fc_625a5fd8",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 5305
      },
      "writtenOn": "2017-03-24T03:13:58Z",
      "side": 1,
      "message": "you want io.ReadFull here.",
      "revId": "229b7307230c0c5660b1cb2e4d09ec3c9e83b778",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49a23979_ba4ba6cd",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 5389
      },
      "writtenOn": "2017-03-24T03:21:23Z",
      "side": 1,
      "message": "I think you want\n\ndata :\u003d make([]byte, entrySize)\nio.ReadFull(r, data)",
      "revId": "229b7307230c0c5660b1cb2e4d09ec3c9e83b778",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "820b7f31_3520dffd",
        "filename": "dir/server/tree/log.go",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 5308
      },
      "writtenOn": "2017-03-24T03:33:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49a23979_ba4ba6cd",
      "revId": "229b7307230c0c5660b1cb2e4d09ec3c9e83b778",
      "serverId": "0759ed4b-3fdc-34dc-866b-f2e708168c03",
      "unresolved": false
    }
  ]
}